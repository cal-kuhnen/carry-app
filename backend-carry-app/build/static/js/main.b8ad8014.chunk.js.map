{"version":3,"sources":["components/QRDisplay.tsx","components/PostComment.tsx","components/CommentDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["baseURL","generateQR","text","a","QRCode","toDataURL","qrURL","console","error","QRDisplay","useState","uName","setUname","qr","setQR","useEffect","socket","emit","on","data","log","off","className","src","alt","PostComment","comment","setComment","link","setLink","onSubmit","event","time","Date","toLocaleString","minute","hour","day","month","toPost","preventDefault","value","onChange","target","type","CommentDisplay","_id","commentList","displayComments","map","socketIOClient","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAIMA,EAAU,yBAGVC,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEGC,IAAOC,UAAUH,GAFpB,cAEXI,EAFW,yBAGRA,GAHQ,uCAMfC,QAAQC,MAAR,MANe,kBAOR,SAPQ,yDAAH,sDA0CDC,EA/BG,WAAO,IAAD,EACIC,mBAAS,WADb,mBACfC,EADe,KACRC,EADQ,OAEFF,mBAAS,IAFP,mBAEfG,EAFe,KAEXC,EAFW,KAuBtB,OAnBAC,qBAAU,WAYR,MAXc,KAAVJ,GAA0B,YAAVA,GAClBK,EAAOC,KAAK,WAEdD,EAAOE,GAAG,SAAV,uCAAoB,WAAMC,GAAN,SAAAhB,EAAA,6DAClBS,EAASO,GACTZ,QAAQa,IAAIpB,EAAUmB,GAFJ,KAGlBL,EAHkB,SAGNb,EAAWD,EAAUmB,GAHf,6EAApB,uDAKAH,EAAOE,GAAG,SAAS,WACjBX,QAAQa,IAAI,4BAEP,WACLb,QAAQa,IAAI,WACZJ,EAAOK,IAAI,UACXL,EAAOK,IAAI,YAEZ,CAACV,IAGF,sBAAKW,UAAU,SAAf,UACGX,EACD,qBAAKY,IAAKV,EAAIW,IAAI,mCCKTC,EAxCK,WAAO,IAAD,EACMf,mBAAS,IADf,mBACjBgB,EADiB,KACRC,EADQ,OAEAjB,mBAAS,IAFT,mBAEjBkB,EAFiB,KAEXC,EAFW,KAyBxB,OACE,uBAAMC,SAdS,SAACC,GAChB,IACIC,GADO,IAAIC,MACCC,eAAe,UAAW,CAAEC,OAAQ,UAAWC,KAAM,UAAWC,IAAK,UAAWC,MAAO,UACnGC,EAAkB,CACpBX,KAAMA,EACNF,QAASA,EACTM,KAAMA,GAERzB,QAAQa,IAAImB,GACZvB,EAAOC,KAAK,eAAgBsB,GAC5BR,EAAMS,kBAIN,UACE,6CAEE,uBAAOC,MAAOf,EAASgB,SAzBX,SAACX,GACjBJ,EAAWI,EAAMY,OAAOF,aA0BtB,0CAEE,uBAAOA,MAAOb,EAAMc,SAzBP,SAACX,GAClBF,EAAQE,EAAMY,OAAOF,aA0BnB,uBAAOG,KAAK,SAASH,MAAM,aChBlBI,EAzBQ,WAAO,IAAD,EACWnC,mBAAS,CAAC,CAACoC,IAAI,EAAGpB,QAAQ,MADrC,mBACpBqB,EADoB,UAG3BhC,qBAAU,WAIR,OAHAC,EAAOE,GAAG,QAAQ,WAChBX,QAAQa,IAAI,uBAEP,WACLJ,EAAOK,IAAI,WAEZ,IAEH,IAAI2B,EAAkBD,EAAYE,KAAI,SAACvB,GACrC,OACE,8BAAwBA,EAAQA,SAAtBA,EAAQoB,QAItB,OACE,8BACCE,K,QCTQhC,E,MAASkC,GADL,yBAiBFC,MAdf,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAAOC,OAAO,EAAMD,KAAK,IAAzB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCVOE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b8ad8014.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport QRCode from 'qrcode';\r\nimport { socket } from '../App';\r\n\r\nconst baseURL = 'https://instagram.com/';\r\n\r\n// Create QR code for the link to the instagram page\r\nconst generateQR = async (text:string) => {\r\n  try {\r\n    let qrURL = await QRCode.toDataURL(text);\r\n    return qrURL;\r\n  }\r\n  catch (err) {\r\n    console.error(err);\r\n    return 'error';\r\n  }\r\n}\r\n\r\nconst QRDisplay = () => {\r\n  const [uName, setUname] = useState('no data');\r\n  const [qr, setQR] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (uName === '' || uName === 'no data') {\r\n      socket.emit('give-qr');\r\n    }\r\n    socket.on('change', async data => {\r\n      setUname(data);\r\n      console.log(baseURL + data);\r\n      setQR(await generateQR(baseURL + data));\r\n    });\r\n    socket.on('cList', () => {\r\n      console.log('why is this happening');\r\n    });\r\n    return () => {\r\n      console.log('cleanup');\r\n      socket.off('change');\r\n      socket.off('cList');\r\n    }\r\n  }, [uName]);\r\n\r\n  return (\r\n    <div className='QRCode'>\r\n      {uName}\r\n      <img src={qr} alt='QR code for instagram link'></img>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QRDisplay;\r\n","import React, { useState } from 'react';\r\nimport { socket } from '../App';\r\n\r\ninterface Comment {\r\n  link: string;\r\n  comment: string;\r\n  time: string;\r\n}\r\n\r\nconst PostComment = () => {\r\n  const [comment, setComment] = useState('');\r\n  const [link, setLink] = useState('');\r\n\r\n  const comChange = (event: any) => {\r\n    setComment(event.target.value);\r\n  };\r\n\r\n  const linkChange = (event: any) => {\r\n    setLink(event.target.value);\r\n  };\r\n\r\n  const onSubmit = (event: any) => {\r\n    let date = new Date();\r\n    let time = date.toLocaleString('default', { minute: 'numeric', hour: 'numeric', day: 'numeric', month: 'short' });\r\n    let toPost: Comment = {\r\n      link: link,\r\n      comment: comment,\r\n      time: time\r\n    };\r\n    console.log(toPost);\r\n    socket.emit('post-comment', toPost);\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <label>\r\n        Comment:\r\n        <input value={comment} onChange={comChange} />\r\n      </label>\r\n      <label>\r\n        Link:\r\n        <input value={link} onChange={linkChange} />\r\n      </label>\r\n      <input type='submit' value='Post' />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PostComment;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { socket } from '../App';\r\n\r\nconst CommentDisplay = () => {\r\n  const [commentList, setCommentList] = useState([{_id:0, comment:\"\"}]);\r\n\r\n  useEffect(() => {\r\n    socket.on('test', () => {\r\n      console.log('getting comments');\r\n    });\r\n    return () => {\r\n      socket.off('test');\r\n    }\r\n  }, []);\r\n\r\n  let displayComments = commentList.map((comment) => {\r\n    return (\r\n      <div key={comment._id}>{comment.comment}</div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div>\r\n    {displayComments}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CommentDisplay;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport QRDisplay from './components/QRDisplay';\nimport PostComment from './components/PostComment';\nimport CommentDisplay from './components/CommentDisplay';\nimport socketIOClient from 'socket.io-client';\n\nconst ENDPOINT = 'http://localhost:3002';\nexport const socket = socketIOClient(ENDPOINT);\n\nfunction App() {\n  return (\n    <Router>\n      <Route path='/post'>\n        <PostComment />\n      </Route>\n      <Route exact={true} path='/'>\n        <QRDisplay />\n        <CommentDisplay />\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}